{
	"info": {
		"_postman_id": "af4894a2-5934-433b-aef2-22ca21cc2e4b",
		"name": "Magento2 GraphQL",
		"description": "It Magento GraphQL API Collection with Magento Commerce and Magento community.\n\nYou need customer token for use these APIs.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Store",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Available Stores",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  availableStores(useCurrentGroup: true) {\n    store_code\n    store_name\n    is_default_store\n    store_group_code\n    is_default_store_group\n    locale\n    base_currency_code\n    default_display_currency_code\n    timezone\n    weight_unit\n    base_url\n    base_link_url\n    base_static_url\n    base_media_url\n    secure_base_url\n    secure_base_link_url\n    secure_base_static_url\n    secure_base_media_url\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cms Blocks",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  cmsBlocks(identifiers: \"login-data\") {\n    items {\n      identifier\n      title\n      content\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Countries",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    countries {\n        id\n        two_letter_abbreviation\n        three_letter_abbreviation\n        full_name_locale\n        full_name_english\n        available_regions {\n            id\n            code\n            name\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Country",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    country(id: \"AU\") {\n        id\n        two_letter_abbreviation\n        three_letter_abbreviation\n        full_name_locale\n        full_name_english\n        available_regions {\n            id\n            code\n            name\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Currency",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    currency {\n        base_currency_code\n        base_currency_symbol\n        default_display_currency_code\n        default_display_currency_symbol\n        available_currency_codes\n        exchange_rates {\n            currency_to\n            rate\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Dynamic Blocks",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  dynamicBlocks(input:\n  {\n    type: SPECIFIED\n  })\n  {\n    items {\n      uid\n      content {\n        html\n      }\n    }\n    page_info {\n      current_page\n      page_size\n      total_pages\n    }\n    total_count\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Recaptcha V3 Config (Available in 2.4.7-beta and PWA Metapackage)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  recaptchaV3Config {\n    minimum_score\n    website_key\n    badge_position\n    failure_message\n    forms\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Store Config",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  storeConfig {\n    store_code\n    store_name\n    is_default_store\n    store_group_code\n    is_default_store_group\n    locale\n    base_currency_code\n    default_display_currency_code\n    timezone\n    weight_unit\n    base_url\n    base_link_url\n    base_static_url\n    base_media_url\n    secure_base_url\n    secure_base_link_url\n    secure_base_static_url\n    secure_base_media_url\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Contact Us Form",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  contactUs(\n    input: {\n      comment: \"My comment\",\n      email: \"bobloblaw@example.com\",\n      telephone: \"(555)-CALL-BOB\",\n      name: \"Bob Loblaw\" }\n      ) {\n    status\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "IsEmail Available",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  isEmailAvailable(email: \"customer@example.com\") {\n    is_email_available\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer Data",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  customer {\n    firstname\n    middlename\n    lastname\n    suffix\n    email\n    group_id\n    addresses {\n      firstname\n      middlename\n      lastname\n      street\n      city\n      region {\n        region_code\n        region\n      }\n      postcode\n      country_code\n      telephone\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customerâ€™s wish list",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  customer {\n    wishlist {\n      items {\n        id\n        description\n        qty\n        product {\n          sku\n          name\n          price_range {\n            maximum_price {\n              regular_price {\n                value\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer Order List",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  customerOrders {\n    items {\n      order_number\n      id\n      created_at\n      grand_total\n      status\n      created_at\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Specific Order",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  customer {\n    orders(filter: {number: {eq: \"000000004\"}}) {\n      total_count\n      items {\n        id\n        number\n        order_date\n        status\n        items {\n          product_name\n          product_sku\n          product_url_key\n          product_sale_price {\n            value\n            currency\n          }\n          quantity_ordered\n          quantity_invoiced\n          quantity_shipped\n          \n        }\n        carrier\n        shipments {\n          id\n          number\n          items {\n            product_name\n            quantity_shipped\n          }\n        }\n        total {\n          base_grand_total {\n            value\n            currency\n          }\n          grand_total {\n            value\n            currency\n          }\n          total_tax {\n            value\n          }\n          subtotal {\n            value\n            currency\n          }\n          taxes {\n            amount {\n              value\n              currency\n            }\n            title\n            rate\n          }\n          total_shipping {\n            value\n          }\n          shipping_handling {\n            amount_including_tax {\n              value\n            }\n            amount_excluding_tax {\n              value\n            }\n            total_amount {\n              value\n            }\n            taxes {\n              amount {\n                value\n              }\n              title\n              rate\n            }\n          }\n          discounts {\n            amount {\n              value\n              currency\n            }\n            label\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer Cart",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  customerCart {\n    id\n    items {\n      id\n      product {\n        name\n        sku\n      }\n      quantity\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Customer Downloadable Products",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  customerDownloadableProducts {\n    items {\n      date\n      download_url\n      order_increment_id\n      remaining_downloads\n      status\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gift Card Account (Adobe Commerce only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  giftCardAccount(input: {gift_card_code: \"01PNC9L76H4H\"}){\n    code\n    balance {\n      currency\n      value\n    }\n    expiration_date\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Generate customer token",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  generateCustomerToken(\n    email: \"surendra.nextbits@gmail.com\"\n    password: \"bhakar@123\"\n  ) {\n    token\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer Password Change",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  changeCustomerPassword(\n    currentPassword: \"bhakar@123\"\n    newPassword: \"bhakar@123\"\n  ) {\n    firstname\n    lastname\n    email\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer Create",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createCustomer(\n    input: {\n      prefix:\"\"\n      firstname: \"John\"\n      lastname: \"Doe\"\n      email: \"john.doe@example.com\"\n      password: \"Password123\"\n      date_of_birth:\"01/01/2001\"\n      taxvat:\"\"\n      gender:1\n      is_subscribed: true\n    }\n  ) {\n    customer {\n      firstname\n      lastname\n      email\n      is_subscribed\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer Details",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateCustomer(\n    input: {\n      firstname: \"Rob\"\n      email: \"robloblaw@example.com\"\n      password: \"bhakar@123\"\n    }\n  ) {\n    customer {\n      firstname\n      email\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer Email",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateCustomerEmail(email: \"surendra.nextbits@gmail.com\", password: \"bhakar@123\") {\n    customer {\n      email\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create customer address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  createCustomerAddress(\n    input: {\n      region: {\n        region_id:597\n      }\n      country_code: IN\n      street: \"Jaipur\"\n      telephone: \"0123456789\"\n      postcode: \"302015\"\n      city: \"jaipur\"\n      prefix:\"\"\n      firstname: \"Payal\"\n      lastname: \"Bhakar\"\n      suffix:\"\"\n      vat_id:\"\"\n      company:\"\"\n      default_shipping: true\n      default_billing: false\n    }\n  ){\n    id\n    region{\n      region\n      region_code\n    }\n    country_code\n    street\n    telephone\n    postcode\n    city\n    firstname\n    lastname\n    default_shipping\n    default_billing\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update customer address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateCustomerAddress(\n    id: 3\n    input: { street: \"Gandhinagar\", city: \"Gandhinagar\", postcode: \"380015\" }\n  ) {\n    id\n    street\n    city\n    postcode\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete customer address",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteCustomerAddress(id: 4)\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Password Reset Email",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  requestPasswordResetEmail(\n    email: \"roni_cost@example.com\"\n  )\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Subscribe Email To Newsletter",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  subscribeEmailToNewsletter(\n    email: \"email@example.com\"\n  ) {\n    status\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Revoke Customer Token",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  revokeCustomerToken {\n    result\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Products To Compare List",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addProductsToCompareList(\n    input: {\n      uid: \"BJwg4CbWxMvRVCiQFFpek61HRproftaD\",\n      products: [\"3\", \"4\"]\n    }\n  ) {\n    uid\n    item_count\n    attributes {\n      code\n      label\n    }\n    items {\n      uid\n      product {\n        sku\n        name\n        description {\n          html\n        }\n      }\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer Admin Token",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n    generateCustomerTokenAsAdmin(\n        input: {\n        customer_email: \"surendra.nextbits@gmail.com\"\n        }){ \n            customer_token \n        }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Compare List To Customer",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    assignCompareListToCustomer(\n        uid: \"sssXyGZkTFksdPnxNoK1ut6OiV4bbchD\",\n    ) {\n        result\n        compare_list {\n            uid\n            item_count\n            attributes {\n                code\n                label\n            }\n            items {\n                uid\n                product {\n                    sku\n                    name\n                    description {\n                        html\n                    }\n                }\n            }\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CustomerV2 (Available for 2.4.7)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createCustomerV2(\n    input: {\n      firstname: \"Bob\"\n      lastname: \"Loblaw\"\n      email: \"bobloblaw@example.com\"\n      password: \"b0bl0bl@w\"\n      is_subscribed: true\n      custom_attributes: [\n        {\n          attribute_code: \"alternative_email\"\n          value: \"abc@example.com\"\n        },\n        {\n          attribute_code: \"studies\"\n          value: \"501,502\"\n          selected_options: [\n            {\n              uid: \"NTEw\"\n              value: \"501\"\n            },\n            {\n              uid: \"NTEx\"\n              value: \"502\"\n            }\n          ]\n        }\n      ]\n    }\n  ) {\n    customer {\n      firstname\n      lastname\n      email\n      is_subscribed\n      custom_attributes {\n        code\n        ... on AttributeValue {\n          value\n        }\n        ... on AttributeSelectedOptions {\n          selected_options {\n            label\n            value\n          }\n        }\n      }\n    }\n  }\n}\n\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CustomerV2 (Available for 2.4.7)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateCustomerV2(\n    input: {\n      firstname: \"Robert\"\n      is_subscribed: false\n      custom_attributes: [\n        {\n          attribute_code: \"random_attribute\"\n          value: \"abc123\"\n        },\n        {\n          attribute_code: \"studies\"\n          value: \"502\"\n          selected_options: [\n            {\n              uid: \"NTEx\"\n              value: \"502\"\n            }\n          ]\n        }\n      ]\n    }\n  ) {\n    customer {\n      firstname\n      is_subscribed\n      custom_attributes {\n        code\n        ... on AttributeValue {\n          value\n        }\n        ... on AttributeSelectedOptions {\n          selected_options {\n            label\n            value\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Email To Friend",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  sendEmailToFriend(\n    input: {\n      product_id: 10\n      sender: {\n        name: \"Veronica Cost\"\n        email: \"roni_cost@example.com\"\n        message: \"Sarah needs this! http://luma.example.com/savvy-shoulder-tote.html\"\n      }\n      recipients: [\n        { name: \"Amie Franklin\", email: \"afranklin@example.com\" }\n        { name: \"Tomoko\", email: \"tomoko@example.com\" }\n      ]\n    }\n  ) {\n    sender {\n      name\n      email\n    }\n    recipients {\n      name\n      email\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reset Password",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  resetPassword(\n    email: \"roni_cost@example.com\",\n    resetPasswordToken: \"gh80pkjGdsPyiXc0sUUXswX1uGN7crUr\",\n    newPassword: \"new_password\"\n  )\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Get Product List",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  products(\n    pageSize: 10,\n    currentPage: 1,\n    filter: {\n      category_id: { eq: \"22\" }\n    }\n  ) {\n    items {\n      id\n      name\n      sku\n      price {\n        regularPrice {\n          amount {\n            value\n            currency\n          }\n        }\n      }\n    }\n    total_count\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Simple Product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  products(filter: { sku: { eq: \"24-MB02\" } }) {\n    total_count\n    sort_fields {\n      default\n      options {\n        label\n        value\n        __typename\n      }\n    }\n    aggregations {\n      count\n      attribute_code\n      label\n      __typename\n      options {\n        count\n        label\n        value\n      }\n    }\n    page_info {\n      current_page\n      page_size\n      total_pages\n      __typename\n    }\n    items {\n      id\n      name\n      sku\n      url_key\n      stock_status\n      new_from_date\n      new_to_date\n      special_price\n      special_from_date\n      special_to_date\n      __typename\n      short_description {\n        html\n      }\n      description {\n        html\n      }\n      sale\n      new\n      gender\n      attribute_set_id\n      meta_title\n      meta_keyword\n      meta_description\n      manufacturer\n      size\n      color\n      country_of_manufacture\n      gift_message_available\n      image {\n        url\n        label\n      }\n      small_image {\n        url\n        label\n      }\n      thumbnail {\n        url\n        label\n      }\n      swatch_image\n      media_gallery {\n        url\n        label\n      }\n      categories {\n        id\n        name\n        is_anchor\n        url_key\n        url_path\n        level\n        display_mode\n        default_sort_by\n        description\n      }\n      price_range {\n        minimum_price {\n          regular_price {\n            value\n            currency\n          }\n          final_price {\n            value\n            currency\n          }\n        }\n        maximum_price {\n          regular_price {\n            value\n            currency\n          }\n          final_price {\n            value\n            currency\n          }\n        }\n      }\n      price_tiers {\n        quantity\n        final_price {\n          value\n          currency\n        }\n      }\n    }\n  }\n}\n",
										"variables": "{\"sku\":\"24-MB01\"}"
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Configurable product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  products(filter: { sku: { eq: \"WH01\" } }) {\n    items {\n      id\n      attribute_set_id\n      name\n      sku\n      __typename\n      price_range{\n        minimum_price{\n          regular_price{\n            value\n            currency\n          }\n        }\n      }\n      categories {\n        id\n      }\n      ... on ConfigurableProduct {\n        configurable_options {\n          id\n          attribute_id\n          label\n          position\n          use_default\n          attribute_code\n          values {\n            value_index\n            label\n            swatch_data{\n              value\n            }\n          }\n          product_id\n        }\n        variants {\n          product {\n            id\n            name\n            sku\n            attribute_set_id\n            ... on PhysicalProductInterface {\n              weight\n            }\n            price_range{\n              minimum_price{\n                regular_price{\n                  value\n                  currency\n                }\n              }\n            }\n          }\n          attributes {\n            label\n            code\n            value_index\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Downloadable Product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  products(filter: { sku: { eq: \"240-LV09\" } }) {\n    total_count\n    sort_fields {\n      default\n      options {\n        label\n        value\n      }\n    }\n    aggregations {\n      count\n      attribute_code\n      label\n      options {\n        count\n        label\n        value\n      }\n    }\n    page_info {\n      current_page\n      total_pages\n      page_size\n    }\n    items {\n      id\n      name\n      sku\n      url_key\n      stock_status\n      new_from_date\n      new_to_date\n      special_price\n      special_from_date\n      special_to_date\n      __typename\n      short_description {\n        html\n      }\n      description {\n        html\n      }\n      sale\n      new\n      gender\n      attribute_set_id\n      meta_title\n      meta_keyword\n      meta_description\n      manufacturer\n      size\n      color\n      country_of_manufacture\n      gift_message_available\n      image {\n        url\n        label\n      }\n      small_image {\n        url\n        label\n      }\n      thumbnail {\n        url\n        label\n      }\n      swatch_image\n      media_gallery {\n        url\n        label\n      }\n      categories {\n        id\n        name\n        is_anchor\n        url_key\n        url_path\n        level\n        display_mode\n        default_sort_by\n        description\n        breadcrumbs {\n          category_id\n          category_name\n          category_level\n          category_url_key\n          category_url_path\n        }\n      }\n      price_range {\n        minimum_price {\n          regular_price {\n            value\n            currency\n          }\n          final_price {\n            value\n            currency\n          }\n          discount {\n            amount_off\n            percent_off\n          }\n        }\n        maximum_price {\n          regular_price {\n            value\n            currency\n          }\n          final_price {\n            value\n            currency\n          }\n          discount {\n            amount_off\n            percent_off\n          }\n        }\n      }\n      price_tiers {\n        quantity\n        final_price {\n          value\n          currency\n        }\n      }\n      ... on DownloadableProduct {\n        links_title\n        links_purchased_separately\n        downloadable_product_links {\n          sample_url\n          sort_order\n          title\n          price\n        }\n        downloadable_product_samples {\n          title\n          sort_order\n          sample_url\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Grouped product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  products(filter: { sku: { eq: \"24-WG085_Group\" } }) {\n    total_count\n    items {\n      id\n      name\n      sku\n      url_key\n      stock_status\n      new_from_date\n      new_to_date\n      special_price\n      special_from_date\n      special_to_date\n      __typename\n      short_description {\n        html\n      }\n      description {\n        html\n      }\n      image {\n        url\n        label\n      }\n      small_image {\n        url\n        label\n      }\n      thumbnail {\n        url\n        label\n      }\n      swatch_image\n      media_gallery {\n        url\n        label\n      }\n      ... on GroupedProduct {\n        id\n        name\n        sku\n        items {\n          qty\n          position\n          product {\n            id\n            sku\n            name\n            stock_status\n            __typename\n            url_key\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Bundle Product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  products(filter: { sku: { eq: \"24-WG080\" } }) {\n    total_count\n    items {\n      id\n      name\n      sku\n      url_key\n      stock_status\n      new_from_date\n      new_to_date\n      special_price\n      special_from_date\n      special_to_date\n      __typename\n      short_description {\n        html\n      }\n      description {\n        html\n      }\n      image {\n        url\n        label\n      }\n      small_image {\n        url\n        label\n      }\n      thumbnail {\n        url\n        label\n      }\n      swatch_image\n      media_gallery {\n        url\n        label\n      }\n      ... on BundleProduct {\n        dynamic_sku\n        dynamic_price\n        dynamic_weight\n        price_view\n        ship_bundle_items\n        items {\n          option_id\n          title\n          sku\n          type\n          required\n          position\n          options {\n            id\n            label\n            quantity\n            can_change_quantity\n            price\n            price_type\n            is_default\n            position\n            product {\n              id\n              name\n              sku\n              stock_status\n              __typename\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Gift Cart Product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  products(filter: { sku: { eq: \"GiftCard25\" } }) {\n    items {\n      uid\n      __typename\n      name\n      sku\n      ... on GiftCardProduct {\n        allow_message\n        message_max_length\n        allow_open_amount\n        open_amount_min\n        open_amount_max\n        is_returnable\n        is_redeemable\n        giftcard_type\n        giftcard_amounts {\n          uid\n          website_id\n          value\n          attribute_id\n          website_value\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Virtual Product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  products(filter: { sku: { eq: \"Vertual Product Test\" } }) {\n    total_count\n    sort_fields {\n      default\n      options {\n        label\n        value\n        __typename\n      }\n    }\n    aggregations {\n      count\n      attribute_code\n      label\n      __typename\n      options {\n        count\n        label\n        value\n      }\n    }\n    page_info {\n      current_page\n      page_size\n      total_pages\n      __typename\n    }\n    items {\n      id\n      name\n      sku\n      url_key\n      stock_status\n      new_from_date\n      new_to_date\n      special_price\n      special_from_date\n      special_to_date\n      __typename\n      short_description {\n        html\n      }\n      description {\n        html\n      }\n      sale\n      new\n      gender\n      attribute_set_id\n      meta_title\n      meta_keyword\n      meta_description\n      manufacturer\n      size\n      color\n      country_of_manufacture\n      gift_message_available\n      image {\n        url\n        label\n      }\n      small_image {\n        url\n        label\n      }\n      thumbnail {\n        url\n        label\n      }\n      swatch_image\n      media_gallery {\n        url\n        label\n      }\n      categories {\n        id\n        name\n        is_anchor\n        url_key\n        url_path\n        level\n        display_mode\n        default_sort_by\n        description\n      }\n      price_range {\n        minimum_price {\n          regular_price {\n            value\n            currency\n          }\n          final_price {\n            value\n            currency\n          }\n        }\n        maximum_price {\n          regular_price {\n            value\n            currency\n          }\n          final_price {\n            value\n            currency\n          }\n        }\n      }\n      price_tiers {\n        quantity\n        final_price {\n          value\n          currency\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Related products",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  products(filter: { sku: { eq: \"WJ08\" } }) {\n    total_count\n    items {\n      id\n      name\n      sku\n      url_key\n      stock_status\n      new_from_date\n      new_to_date\n      special_price\n      special_from_date\n      special_to_date\n      __typename\n      related_products {\n        id\n        name\n        sku\n        url_key\n        __typename\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Upsell products",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  products(filter: { sku: { eq: \"24-WB03\" } }) {\n    total_count\n    items {\n      id\n      name\n      sku\n      url_key\n      stock_status\n      new_from_date\n      new_to_date\n      special_price\n      special_from_date\n      special_to_date\n      __typename\n      upsell_products {\n        id\n        name\n        sku\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Cross-Sell products",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  products(filter: { sku: { eq: \"24-WB03\" } }) {\n    total_count\n    items {\n      id\n      name\n      sku\n      url_key\n      stock_status\n      new_from_date\n      new_to_date\n      special_price\n      special_from_date\n      special_to_date\n      __typename\n      crosssell_products {\n        id\n        name\n        sku\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Category",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  category(id: 20) {\n    products {\n      total_count\n      page_info {\n        current_page\n        page_size\n      }\n    }\n    children_count\n    children {\n      id\n      level\n      name\n      path\n      children {\n        id\n        level\n        name\n        path\n        children {\n          id\n          level\n          name\n          path\n          children {\n            id\n            level\n            name\n            path\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Categories",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  categories(\n    filters: {\n      ids: {in: [\"3\", \"9\", \"12\", \"21\", \"38\", \"39\"]}\n      parent_id: {in: [\"2\"]}\n    }\n    pageSize:3\n    currentPage: 1\n  ) {\n    total_count\n    items {\n      uid\n      level\n      name\n      path\n      children_count\n      children {\n        uid\n        level\n        name\n        path\n        children_count\n        children {\n          uid\n          level\n          name\n          path\n        }\n      }\n    }\n    page_info {\n      current_page\n      page_size\n      total_pages\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Category List",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  categoryList(filters: {ids: {in: [\"3\", \"20\"]}}) {\n    children_count\n    children {\n      id\n      level\n      name\n      path\n      url_path\n      url_key\n      image\n      description\n      children {\n        id\n        level\n        name\n        path\n        url_path\n        url_key\n        image\n        description\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Category Product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  categoryList(filters: {ids: {eq: \"21\"}}) {\n    products {\n      total_count\n      items{\n        id\n        sku\n        name\n        url_key\n        stock_status\n        new\n        image{\n          url\n          label\n          position\n        }\n        small_image{\n          url\n          label\n          position\n        }\n        thumbnail{\n          url\n          label\n          position\n        }\n        short_description{\n          html\n        }\n        description{\n          html\n        }\n        price_range{\n          minimum_price{\n            regular_price{\n              value\n              currency\n            }\n            final_price{\n              value\n              currency\n            }\n          }\n          maximum_price{\n            regular_price{\n              value\n              currency\n            }\n            final_price{\n              value\n              currency\n            }\n          }\n        }\n        new_from_date\n        new_to_date\n        special_price\n        special_from_date\n        special_to_date\n        gift_message_available\n        country_of_manufacture\n        price_tiers{\n          quantity\n          final_price{\n            value\n            currency\n          }\n          discount{\n            amount_off\n            percent_off\n          }\n        }\n      }\n      page_info {\n        current_page\n        page_size\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Layered Navigation Data",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  products(filter: { category_id: { eq: \"14\" } }) {\n    total_count\n    aggregations{\n      attribute_code\n      label\n      count\n      options{\n        count\n        label\n        value\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Search Product",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  products(search: \"Yoga pants\", pageSize: 5) {\n    total_count\n    items {\n      name\n      sku\n      price_range {\n        minimum_price {\n          regular_price {\n            value\n            currency\n          }\n        }\n      }\n      image {\n        url\n        label\n      }\n      small_image {\n        url\n        label\n      }\n    }\n    page_info {\n      page_size\n      current_page\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Compare List",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n    compareList(\n        uid: \"sssXyGZkTFksdPnxNoK1ut6OiV4bbchD\"\n    ) {\n        uid\n        item_count\n        attributes {\n            code\n            label\n        }\n        items {\n            uid\n            product {\n                sku\n                name\n                description {\n                    html\n                }\n            }\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Category List",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  categoryList(\n    filters: {\n      ids: {in: [\"20\", \"11\"]}\n      parent_id: {in: [\"2\"]}\n    }\n  ) {\n    children_count\n    children {\n      uid\n      level\n      name\n      path\n      url_path\n      url_key\n      children {\n        uid\n        level\n        name\n        path\n        url_path\n        url_key\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Url Resolver",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  urlResolver(url: \"joust-duffle-bag.html\") {\n    entity_uid\n    relative_url\n    redirectCode\n    type\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Review Ratings Metadata",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  productReviewRatingsMetadata {\n    items {\n      id\n      name\n      values {\n        value_id\n        value\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Product Route",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  route(url: \"sprite-yoga-companion-kit.html\") {\n    __typename\n    relative_url\n    redirect_code\n    type\n    ... on SimpleProduct {\n      sku\n      url_key\n      uid\n      url_rewrites {\n        url\n        parameters {\n          name\n          value\n        }\n      }\n    }\n    ... on ConfigurableProduct {\n      sku\n      image {\n        label\n      }\n      uid\n      url_key\n      url_suffix\n      url_rewrites {\n        parameters {\n          name\n          value\n        }\n      }\n      media_gallery {\n        url\n      }\n    }\n    ... on CategoryTree {\n      uid\n      product_count\n      canonical_url\n      products {\n        total_count\n        items {\n          sku\n          uid\n        }\n      }\n    }\n    ... on CmsPage {\n      content\n      content_heading\n      meta_title\n      meta_keywords\n      meta_description\n      page_layout\n      identifier\n      title\n      url_key\n    }\n    ... on GroupedProduct {\n      canonical_url\n      sku\n      items {\n        product {\n          uid\n          url_key\n        }\n      }\n    }\n    ... on BundleProduct {\n      items {\n        sku\n        required\n        type\n        title\n        options {\n          uid\n          is_default\n          can_change_quantity\n          price_type\n          quantity\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Add Products To Compare List",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addProductsToCompareList(\n    input: {\n      uid: \"jnNdTRT4P2LMDAFo7gQmbKih9nNeRVGR\",\n      products: [\"3\", \"4\"]\n    }\n  ) {\n    uid\n    item_count\n    attributes {\n      code\n      label\n    }\n    items {\n      uid\n      product {\n        sku\n        name\n        description {\n          html\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Compare List",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    deleteCompareList(\n        uid: \"sssXyGZkTFksdPnxNoK1ut6OiV4bbchD\"\n    ) {\n        result\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Products From Compare List",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  removeProductsFromCompareList(\n    input: {\n      uid: \"sssXyGZkTFksdPnxNoK1ut6OiV4bbchD\",\n      products: [\"1\", \"2\"]\n    }\n  ) {\n    uid\n    item_count\n    attributes {\n      code\n      label\n    }\n    items {\n      uid\n      product {\n        sku\n        name\n        description {\n          html\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Product Review",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createProductReview(\n    input: {\n      sku: \"WH08\",\n      nickname: \"Roni\",\n      summary: \"Great looking sweatshirt\",\n      text: \"This sweatshirt looks and feels great. The zipper sometimes sticks a bit.\",\n      ratings: [\n        {\n          id: \"NA==\",\n          value_id: \"MTk=\"\n        }, {\n          id: \"MQ==\",\n          value_id: \"NA==\"\n        }, {\n          id: \"Mg==\",\n          value_id: \"OA==\"\n        }\n      ]\n    }\n) {\n    review {\n      nickname\n      summary\n      text\n      average_rating\n      ratings_breakdown {\n        name\n        value\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Compare List",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    createCompareList(\n        input: {\n            products: [\"1\", \"2\"]\n        }\n    ) {\n        uid\n        item_count\n        attributes {\n            code\n            label\n        }\n        items {\n            uid\n            product {\n                sku\n                name\n                description {\n                    html\n                }\n            }\n        }\n    }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "CMS Page",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Get StoreConfig",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  storeConfig {\n    cms_home_page\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Home page",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  cmsPage(identifier: \"home\") {\n    title\n    url_key\n    content_heading\n    content\n    page_layout\n    meta_title\n    meta_keywords\n    meta_description\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CMS Page",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  cmsPage(identifier: \"no-route\") {\n    title\n    url_key\n    content_heading\n    content\n    page_layout\n    meta_title\n    meta_keywords\n    meta_description\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CMS Block",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  cmsBlocks(identifiers: \"login-data\") {\n    items {\n      identifier\n      title\n      content\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get CMS Blocks",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  cmsBlocks(identifiers: [\"login-data\",\"contact-us-info\"]) {\n    items {\n      identifier\n      title\n      content\n    }\n  }\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Wishlist",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Wishlist",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  wishlist {\n    items_count\n    name\n    sharing_code\n    updated_at\n    items {\n      id\n      qty\n      description\n      added_at\n      product {\n        sku\n        name\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Add Wishlist",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addProductsToWishlist(\n    wishlistId: 1\n    wishlistItems: [\n      {\n        sku: \"24-MB01\"\n        quantity: 1\n      }\n      {\n        sku: \"WG-09\"\n        quantity: 1\n        }\n      {\n        parent_sku: \"WJ01\"\n        sku: \"WJ01-M-Red\"\n        quantity: 1\n      }\n      {\n        sku: \"24-WG080\"\n        quantity: 1\n        selected_options: [\n          \"YnVuZGxlLzEvMS8x\"\n          \"YnVuZGxlLzIvNC8x\"\n          \"YnVuZGxlLzMvNy8x\"\n          \"YnVuZGxlLzQvOC8x\"\n        ]\n      }\n    ]\n  ) {\n    wishlist {\n      id\n      items_count\n      items_v2 (currentPage: 1, pageSize: 8 ) {\n        items {\n          id\n          quantity\n          ... on BundleWishlistItem {\n            bundle_options {\n              values {\n                id\n                label\n                quantity\n              }\n            }\n          }\n          product {\n            uid\n            name\n            sku\n            price_range {\n              minimum_price {\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              maximum_price {\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    user_errors {\n      code\n      message\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Wishlist Items To Cart",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addWishlistItemsToCart(\n    wishlistId: 1\n    wishlistItemIds: [1])\n  {\n    status\n    add_wishlist_items_to_cart_user_errors {\n      code\n      message\n    }\n    wishlist {\n      id\n      items_v2 {\n        items {\n          id\n          product {\n            uid\n            sku\n            name\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Copy Products Between Wishlists For Adobe Commerce",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  copyProductsBetweenWishlists(sourceWishlistUid: 1, destinationWishlistUid: 2, wishlistItems: [\n    {\n      wishlist_item_id: 6\n      quantity: 1\n    }\n    {\n      wishlist_item_id: 7\n      quantity: 1\n    }\n  ]){\n    destination_wishlist {\n      id\n      items_v2 {\n        items {\n          id\n          product {\n            uid\n            sku\n            name\n          }\n        }\n      }\n    }\n    user_errors {\n      code\n      message\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wishlist For (Adobe Commerce)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token\n",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createWishlist(input: {\n    name: \"My favorites\"\n    visibility: PUBLIC\n    }\n  ) {\n    wishlist {\n      id\n      name\n      visibility\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Wishlist",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token\n",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  deleteWishlist(wishlistId: 3){\n    status\n    wishlists {\n      id\n      name\n      items_count\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move Products Between Wishlists",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  moveProductsBetweenWishlists(sourceWishlistUid: 2, destinationWishlistUid: 1, wishlistItems: [\n    {\n      wishlist_item_id: 9\n      quantity: 1\n    }\n  ]){\n    source_wishlist {\n      id\n      items_v2 {\n        items {\n          id\n          product {\n            uid\n            sku\n            name\n          }\n        }\n      }\n    }\n    destination_wishlist {\n      id\n      items_v2 {\n        items {\n          id\n          product {\n            uid\n            sku\n            name\n          }\n        }\n      }\n    }\n    user_errors {\n      code\n      message\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Products From Wishlist",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  removeProductsFromWishlist(\n  wishlistId: 1\n  wishlistItemsIds: [\n    1\n  ]){\n    wishlist {\n      id\n      items_count\n      items_v2 {\n        items {\n          id\n          quantity\n          product {\n            uid\n            name\n            sku\n            price_range {\n              minimum_price {\n                regular_price  {\n                  currency\n                  value\n                }\n              }\n              maximum_price {\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    user_errors {\n      code\n      message\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Products In Wishlist",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateProductsInWishlist(\n  wishlistId: 1\n  wishlistItems: [\n    {\n      wishlist_item_id: 5\n      quantity: 2\n    }\n    {\n      wishlist_item_id: 11\n      description: \"I love this!\"\n    }\n  ]){\n    wishlist {\n      id\n      items_count\n      items_v2 {\n        items {\n          id\n          quantity\n          product {\n            name\n            sku\n            uid\n            price_range {\n              minimum_price {\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              maximum_price {\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    user_errors {\n      code\n      message\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Wishlist (Adobe Commerce)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateWishlist(\n    wishlistUid: 4\n    name: \"My favorite things\"\n    visibility: PUBLIC\n  ) {\n    name\n    uid\n    visibility\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Cart",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Cart Data",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  cart(cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\") {\n    email\n    billing_address {\n      city\n      country {\n        code\n        label\n      }\n      firstname\n      lastname\n      postcode\n      region {\n        code\n        label\n      }\n      street\n      telephone\n    }\n    shipping_addresses {\n      firstname\n      lastname\n      street\n      city\n      region {\n        code\n        label\n      }\n      country {\n        code\n        label\n      }\n      telephone\n      available_shipping_methods {\n        amount {\n          currency\n          value\n        }\n        available\n        carrier_code\n        carrier_title\n        error_message\n        method_code\n        method_title\n        price_excl_tax {\n          value\n          currency\n        }\n        price_incl_tax {\n          value\n          currency\n        }\n      }\n      selected_shipping_method {\n        amount {\n          value\n          currency\n        }\n        carrier_code\n        carrier_title\n        method_code\n        method_title\n      }\n    }\n    items {\n      id\n      product {\n        name\n        sku\n      }\n      quantity\n      errors {\n        code\n        message\n      }\n    }\n    available_payment_methods {\n      code\n      title\n    }\n    selected_payment_method {\n      code\n      title\n    }\n    applied_coupons {\n      code\n    }\n    prices {\n      grand_total {\n        value\n        currency\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Pickup Locations",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  pickupLocations(\n    area:{\n      radius: 1500\n      search_term: \"Austin:US\"\n    }\n    pageSize: 1\n    currentPage: 1\n    sort: {distance: ASC},\n    productsInfo: [\n        {\n            sku: \"SKU-1\"\n        }\n    ]\n  ) {\n    items {\n      pickup_location_code\n      name\n      email\n      fax\n      description\n      latitude\n      longitude\n      country_id\n      region_id\n      region\n      city\n      street\n      postcode\n      phone\n    },\n    total_count\n    page_info {\n      page_size\n      current_page\n      total_pages\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Create Empty Cart",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "token",
										"value": "{{token}}",
										"description": "If you are creating a cart for a logged in customer, you must include the customer's authorization token in the header of the request.",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createEmptyCart\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Bundle Products To Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addBundleProductsToCart(\n    input: {\n      cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\"\n      cart_items: [\n      {\n        data: {\n          sku: \"24-WG080\"\n          quantity: 1\n        }\n        bundle_options: [\n          {\n            id: 1\n            quantity: 1\n            value: [\n              \"2\"\n            ]\n          },\n          {\n            id: 2\n            quantity: 2\n            value: [\n              \"4\"\n            ]\n          },\n          {\n            id: 3\n            quantity: 1\n            value: [\n              \"7\"\n            ]\n          },\n          {\n            id: 4\n            quantity: 1\n            value: [\n              \"8\"\n            ]\n          }\n        ]\n      },\n    ]\n  }) {\n    cart {\n      items {\n        uid\n        quantity\n        product {\n          sku\n        }\n        ... on BundleCartItem {\n          bundle_options {\n            uid\n            label\n            type\n            values {\n              id\n              label\n              price\n              quantity\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Configurable Products To Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addConfigurableProductsToCart(\n    input: {\n      cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\"\n      cart_items: [\n        {\n          parent_sku: \"MH02\"\n          data: {\n            quantity: 2\n            sku: \"MH02-XS-Black\"\n          }\n        }\n      ]\n    }\n  ) {\n    cart {\n      items {\n        uid\n        quantity\n        product {\n          name\n          sku\n        }\n        ... on ConfigurableCartItem {\n          configurable_options {\n            option_label\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Downloadable Products To Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addDownloadableProductsToCart(\n    input: {\n      cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\"\n      cart_items: {\n        data: {\n          sku: \"240-LV09\"\n          quantity: 1\n        }\n        downloadable_product_links: [\n          {\n            link_id: 7                 # Episode 2\n          }\n          {\n            link_id: 8                 # Episode 3\n          }\n        ]\n      }\n    }\n  ) {\n    cart {\n      items {\n        product {\n          sku\n        }\n        quantity\n        ... on DownloadableCartItem {\n          links {\n            title\n            price\n          }\n          samples {\n            title\n            sample_url\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Products To Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addProductsToCart(\n    cartId: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\"\n    cartItems: [\n      {\n        quantity: 1\n        sku: \"24-MB04\"\n      }\n    ]\n  ) {\n    cart {\n      items {\n        product {\n          name\n          sku\n        }\n        quantity\n      }\n    }\n    user_errors {\n      code\n      message\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Simple Products To Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addSimpleProductsToCart(\n    input: {\n      cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\"\n      cart_items: [\n        {\n          data: {\n            quantity: 1\n            sku: \"24-MB04\"\n          }\n        }\n      ]\n    }\n  ) {\n    cart {\n      items {\n        id\n        product {\n          name\n          sku\n        }\n        quantity\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Virtual Products To Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addVirtualProductsToCart(\n    input: {\n      cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\",\n      cart_items: [\n        {\n          data: {\n            quantity: 1\n            sku: \"Vertual Product Test\"\n          }\n        }\n       ]\n    }\n  ) {\n    cart {\n      items {\n        product {\n          name\n        }\n        quantity\n      }\n      prices {\n        grand_total {\n          value\n          currency\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply Coupon To Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  applyCouponToCart(\n    input: {\n      cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\",\n      coupon_code: \"H20\"\n    }\n  ) {\n    cart {\n      items {\n        product {\n          name\n        }\n        quantity\n      }\n      applied_coupons {\n        code\n      }\n      prices {\n        grand_total{\n          value\n          currency\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply Gift Card To Cart (Adobe Commerce only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  applyGiftCardToCart(\n    input: {\n      cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\"\n      gift_card_code: \"0330CEIVTLB4\"\n    }\n  ) {\n    cart {\n      applied_gift_cards {\n        applied_balance {\n          value\n          currency\n        }\n        code\n        current_balance {\n          value\n          currency\n        }\n        expiration_date\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply Reward Points To Cart (Adobe Commerce only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  applyRewardPointsToCart(cartId: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\")\n  {\n    cart {\n      items {\n        quantity\n        product {\n          sku\n          name\n          price_range {\n            maximum_price {\n              final_price {\n                currency\n                value\n              }\n            }\n          }\n        }\n      }\n      applied_reward_points {\n        money {\n          currency\n          value\n        }\n        points\n      }\n      prices {\n        grand_total {\n          currency\n          value\n        }\n        applied_taxes {\n          amount {\n            currency\n            value\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Apply Store Credit To Cart(Adobe Commerce only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  applyStoreCreditToCart(\n    input: {\n      cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\"\n    }\n  ) {\n    cart {\n      applied_store_credit {\n        applied_balance {\n          currency\n          value\n        }\n        current_balance {\n          currency\n          value\n        }\n      }\n      prices {\n        grand_total {\n          currency\n          value\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign Customer To Guest Cart",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  assignCustomerToGuestCart(\n    cart_id: \"MDYKgqIdWMKr7VD1zlYwxrB7kuX8lR5s\"\n  ) {\n    items {\n      quantity\n      product {\n        sku\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Merge Carts",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  mergeCarts(\n    source_cart_id: \"mPKE05OOtcxErbk1Toej6gw6tcuxvT9O\",\n    destination_cart_id: \"CYmiiQRjPVc2gJUc5r7IsBmwegVIFO43\"\n  ) {\n    items {\n      id\n      product {\n        name\n        sku\n      }\n      quantity\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Place Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  placeOrder(\n    input: {\n      cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\"\n    }\n  ) {\n    order {\n      order_number\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Redeem Gift Card Balance As Store Credit",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  redeemGiftCardBalanceAsStoreCredit(\n    input: {\n      gift_card_code: \"056MHP57TJ5C\"\n    }\n  ) {\n    balance {\n      currency\n      value\n    }\n    code\n    expiration_date\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Coupon From Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  removeCouponFromCart(\n    input:\n      { cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\" }\n    ) {\n    cart {\n      items {\n        product {\n          name\n        }\n        quantity\n      }\n      applied_coupons {\n        code\n      }\n      prices {\n        grand_total{\n          value\n          currency\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Gift Card From Cart(Adobe Commerce only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n removeGiftCardFromCart(\n   input: {\n     cart_id: \"lOeLKsVkZ1PEvA8A7EaCvmEAk4JRBR7A\"\n     gift_card_code: \"049XDMZ6L81X\"\n   }\n ) {\n   cart {\n     applied_gift_cards {\n       code\n     }\n   }\n }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Item From Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  removeItemFromCart(\n    input: {\n      cart_id: \"IeTUiU0oCXjm0uRqGCOuhQ2AuQatogjG\",\n      cart_item_id: 14\n    }\n  )\n {\n  cart {\n    items {\n      id\n      product {\n        name\n      }\n      quantity\n    }\n    prices {\n      grand_total{\n        value\n        currency\n      }\n    }\n  }\n }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Reward Points From Cart(Adobe Commerce only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  removeRewardPointsFromCart(cartId: \"8k0Q4MpH2IGahWrTRtqM61YV2MtLPApz\")\n  {\n    cart {\n      applied_reward_points {\n        money {\n          currency\n          value\n        }\n        points\n      }\n      prices {\n        applied_taxes {\n          amount {\n            currency\n            value\n          }\n        }\n        grand_total {\n          currency\n          value\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Store Credit From Cart(Adobe Commerce only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  removeStoreCreditFromCart(\n    input: {\n      cart_id: \"4HHaKzxpKM2ZwD0IcheRfcPNBWS3OvRM\"\n    }\n  ) {\n    cart {\n      applied_store_credit {\n        applied_balance {\n          currency\n          value\n        }\n        current_balance {\n          currency\n          value\n        }\n      }\n      prices {\n        grand_total {\n          currency\n          value\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Billing Address On Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  setBillingAddressOnCart(\n    input: {\n      cart_id: \"4JQaNVJokOpFxrykGVvYrjhiNv9qt31C\"\n      billing_address: {\n        address: {\n          firstname: \"Bob\"\n          middlename: \"Joe\"\n          lastname: \"Roll\"\n          prefix: \"Mr.\"\n          suffix: \"Jr.\"\n          company: \"Magento\"\n          street: [\"Magento Pkwy\", \"Main Street\"]\n          city: \"Austin\"\n          region: \"TX\"\n          postcode: \"78758\"\n          country_code: \"US\"\n          telephone: \"8675309\"\n          fax: \"8675311\"\n          save_in_address_book: true\n        }\n        same_as_shipping: false\n      }\n    }\n  ) {\n    cart {\n      billing_address {\n        firstname\n        middlename\n        lastname\n        prefix\n        suffix\n        company\n        street\n        city\n        region{\n          code\n          label\n        }\n        postcode\n        telephone\n        fax\n        country{\n          code\n          label\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Gift Options On Cart(Adobe Commerce only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  setGiftOptionsOnCart(\n    input: {\n      cart_id: \"8k0Q4MpH2IGahWrTRtqM61YV2MtLPApz\"\n      gift_message: {\n        to: \"Alex\"\n        from: \"Veronica\"\n        message: \"Happy Birthday!\"\n      }\n      gift_wrapping_id: \"Mg==\"\n      gift_receipt_included: true\n      printed_card_included: false\n    }\n  ) {\n    cart {\n      id\n      gift_message {\n        to\n        from\n        message\n      }\n      gift_wrapping {\n        uid\n      }\n      gift_receipt_included\n      printed_card_included\n      items {\n        quantity\n        prices {\n          price {\n            value\n            currency\n          }\n        }\n      }\n      prices {\n        gift_options {\n          gift_wrapping_for_order {\n            value\n            currency\n          }\n        }\n        grand_total {\n          value\n          currency\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Guest Email On Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  setGuestEmailOnCart(\n    input: {\n      cart_id: \"4JQaNVJokOpFxrykGVvYrjhiNv9qt31C\"\n      email: \"jdoe@example.com\"\n    }\n  ) {\n    cart {\n      email\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Payment Method And Place Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  setPaymentMethodAndPlaceOrder(\n    input: {\n      cart_id: \"IeTUiU0oCXjm0uRqGCOuhQ2AuQatogjG\"\n      payment_method: {\n        code: \"checkmo\"\n      }\n    }\n  ) {\n    order {\n      order_id\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Payment Method On Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  setPaymentMethodOnCart(input: {\n      cart_id: \"rMQdWEecBZr4SVWZwj2AF6y0dNCKQ8uH\"\n      payment_method: {\n          code: \"banktransfer\"\n      }\n  }) {\n    cart {\n      selected_payment_method {\n        code\n        title\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Shipping Addresses On Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  setShippingAddressesOnCart(\n    input: {\n      cart_id: \"4JQaNVJokOpFxrykGVvYrjhiNv9qt31C\"\n      shipping_addresses: [\n        {\n          address: {\n            firstname: \"Bob\"\n            middlename: \"Joe\"\n            lastname: \"Roll\"\n            prefix: \"Mr.\"\n            suffix: \"Jr.\"\n            company: \"Magento\"\n            street: [\"Magento Pkwy\", \"Main Street\"]\n            city: \"Austin\"\n            region: \"TX\"\n            postcode: \"78758\"\n            country_code: \"US\"\n            telephone: \"8675309\"\n            fax: \"8675311\"\n            save_in_address_book: false\n          },\n          pickup_location_code: \"txspeqs\"\n        }\n      ]\n    }\n  ) {\n    cart {\n      shipping_addresses {\n        firstname\n        middlename\n        lastname\n        prefix\n        suffix\n        company\n        street\n        city\n        region {\n          code\n          label\n        }\n        postcode\n        telephone\n        fax\n        country {\n          code\n          label\n        }\n        pickup_location_code\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Shipping Methods On Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  setShippingMethodsOnCart(\n    input: {\n      cart_id: \"IeTUiU0oCXjm0uRqGCOuhQ2AuQatogjG\",\n      shipping_methods: [\n        {\n          carrier_code: \"tablerate\"\n          method_code: \"bestway\"\n        }\n      ]\n    }\n  ) {\n    cart {\n      shipping_addresses {\n        selected_shipping_method {\n          carrier_code\n          carrier_title\n          method_code\n          method_title\n          amount {\n            value\n            currency\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Cart Items",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateCartItems(\n    input: {\n      cart_id: \"2m3Wpue1L3bNARhErAKbZ8Lb7czvgq6R\",\n      cart_items: [\n        {\n          cart_item_uid: \"MjQ=\"\n          quantity: 3\n        }\n      ]\n    }\n  ){\n    cart {\n      items {\n        uid\n        product {\n          name\n        }\n        quantity\n      }\n      prices {\n        grand_total{\n          value\n          currency\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Checkout",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Checkout Agreements",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  checkoutAgreements {\n    agreement_id\n    checkbox_text\n    content\n    content_height\n    is_html\n    mode\n    name\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Customer Payment Tokens",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  customerPaymentTokens {\n    items {\n      details\n      public_hash\n      payment_method_code\n      type\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Hosted Pro Url",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  getHostedProUrl(input: { cart_id: \"LYK2R8btHBM92mrJe1cWj6RzSXiwcVFW\" }) {\n    secure_form_url\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Pay flow Link Token",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  getPayflowLinkToken(input: {cart_id: \"123\"}) {\n    secure_token\n    secure_token_id\n    mode\n    paypal_url\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Payment Config",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n    getPaymentConfig( location: CHECKOUT ) {\n            hosted_fields {\n                code\n                title\n                payment_intent\n                sort_order\n                sdk_params {\n                    name\n                    value\n                }\n                is_visible\n                payment_source\n                three_ds\n                is_vault_enabled\n                cc_vault_code\n                requires_card_details\n            }\n            smart_buttons {\n                code\n                title\n                payment_intent\n                sort_order\n                sdk_params {\n                    name\n                    value\n                }\n                is_visible\n                message_styles {\n                    layout\n                    logo {\n                        type\n                    }\n                }\n                display_message\n                display_venmo\n                  button_styles {\n                    layout\n                    color\n                    shape\n                    label\n                    tagline\n                    height\n                    use_default_height\n                }\n            }\n            apple_pay {\n                payment_source\n                code\n                title\n                payment_intent\n                sort_order\n                sdk_params {\n                    name\n                    value\n                }\n                is_visible\n                button_styles {\n                    layout\n                    color\n                    shape\n                    label\n                    tagline\n                    height\n                    use_default_height\n                }\n            }\n        }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Payment Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n    getPaymentOrder (\n      cartId: \"rPG5SFUQN6ePsfNNDnhrmmr9SNWqpPSS\"\n      id: \"9XD295279E1088104\"\n    ) {\n      mp_order_id\n      id\n      status\n      payment_source_details {\n        card {\n          name\n          last_digits\n          card_expiry_month\n          card_expiry_year\n          bin_details {\n            bin\n          }\n        }         \n      }\n    }\n  }\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Payment SDK For Adobe Commerce",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"query {",
											"  getPaymentSDK(input: { location: \"CHECKOUT\" }) {",
											"    sdkParams {",
											"      code",
											"      params {",
											"        name",
											"        value",
											"      }",
											"    }",
											"  }",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  getPaymentSDK(input: { location: \"CHECKOUT\" }) {\n    sdkParams {\n      code\n      params {\n        name\n        value\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Create Braintree Client Token",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createBraintreeClientToken\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payflow Pro Token",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createPayflowProToken(\n    input: {\n      cart_id: \"Po1WkfK7d3vZE0qga610NwJIbxgqllpt\"\n      urls: {\n        return_url: \"paypal/action/return.html\"\n        cancel_url: \"paypal/action/cancel.html\"\n        error_url: \"paypal/action/error.html\"\n      }\n    }\n  ) {\n    response_message\n    result\n    result_code\n    secure_token\n    secure_token_id\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payment Order For Adobe Commerce",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createPaymentOrder(input: {\n    cartId: \"AJCY8dhIfuch9LcDHAxEkw7oG3DjGdKt\"\n    methodCode: \"payment_services_paypal_hosted_fields\"\n    paymentSource: \"cc\"\n    location: CHECKOUT\n    vaultIntent: false\n  }) {\n    id\n    mp_order_id\n    status\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Paypal Express Token",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createPaypalExpressToken(\n    input: {\n      cart_id: \"rMQdWEecBZr4SVWZwj2AF6y0dNCKQ8uH\"\n      code: \"paypal_express\"\n      express_button: true\n      urls: {\n        return_url: \"paypal/action/return.html\"\n        cancel_url: \"paypal/action/cancel.html\"\n      }\n    }\n  ) {\n    token\n    paypal_urls {\n      start\n      edit\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Payment Token",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deletePaymentToken(\n    public_hash: \"377c1514e0...\"\n  ) {\n    result\n    customerPaymentTokens {\n      items {\n        details\n        public_hash\n        payment_method_code\n        type\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Sync Payment Order For Abode Commerce Only",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  syncPaymentOrder(input: {\n    cartId: \"AJCY8dhIfuch9LcDHAxEkw7oG3DjGdKt\"\n    id: \"8J864634M9466143S\"\n  })\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Handle Payflow Pro Response",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  handlePayflowProResponse(\n    input: {\n      cart_id: \"Po1WkfK7d3vZE0qga610NwJIbxgqllpt\"\n      paypal_payload: \"$payload\"\n    }\n  ){\n    cart {\n      selected_payment_method {\n        code\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Add Return Comment",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  addReturnComment(input: {\n    return_uid: \"Mw==\"\n    comment_text: \"I'd like a refund\"})\n    {\n    return {\n      uid\n      status\n      comments {\n        uid\n        author_name\n        text\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Return Tracking",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  addReturnTracking(input: {\n    return_uid: \"Mw==\"\n    carrier_uid: \"dXBzLTE=\"\n    tracking_number: \"1Z9876543\"\n  }){\n    return_shipping_tracking {\n      uid\n      carrier {\n        uid\n        label\n      }\n      tracking_number\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cancel Order(Available in 2.4.7-beta only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n    cancelOrder(\n        input: {\n            order_id: \"99999999\",\n            reason: \"The order was placed by mistake\"\n        }\n    ){\n        error\n        order {\n            status\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Return Tracking",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  removeReturnTracking(input: {\n    return_shipping_tracking_uid: \"Mw==\"\n  }){\n    return {\n      uid\n      shipping {\n        tracking {\n          carrier {\n            uid\n            label\n          }\n          tracking_number\n          status {\n            text\n            type\n          }\n        }\n      }\n      items {\n        order_item {\n          product_name\n          product_sku\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Return(Adobe Commerce only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  requestReturn(input: {\n    order_uid: \"NQ==\"\n    contact_email: \"test1@example.com\"\n    comment_text: \"I want to return the shirt because I don't like the texture of the fabric\"\n    items: {\n      order_item_uid: \"MTE=\"\n      quantity_to_return: 1\n    }\n  }){\n    return {\n      uid\n      items {\n        uid\n        status\n        request_quantity\n        quantity\n        order_item {\n          id\n          eligible_for_return\n          product_sku\n          product_sku\n          product_type\n          quantity_returned\n          status\n        }\n      }\n      number\n      status\n      comments {\n        uid\n        author_name\n        text\n        created_at\n      }\n      customer {\n        firstname\n        lastname\n        email\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reorder Items",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  reorderItems(orderNumber: \"000000003\"){\n    cart {\n      id\n      items {\n        uid\n        product {\n          sku\n        }\n        quantity\n        prices {\n          price {\n            value\n          }\n        }\n      }\n    }\n    userInputErrors{\n      code\n      message\n      path\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Interface",
					"item": [
						{
							"name": "Credit Memo Item Interface",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n  customer {\n    firstname\n    lastname\n    email\n    orders(\n      filter: {\n        number: {\n          match: \"000000005\"\n        }\n      }) {\n      items {\n        id\n        credit_memos {\n          id\n          items {\n            id\n            product_sku\n            product_name\n            order_item {\n              product_type\n            }\n            quantity_refunded\n            ... on BundleCreditMemoItem {\n              bundle_options {\n                id\n                values {\n                  id\n                  product_name\n                  product_sku\n                  quantity\n                  price {\n                    value\n                    currency\n                  }\n                }\n              }\n            }\n            ... on DownloadableCreditMemoItem {\n              downloadable_links {\n                uid\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invoice Item Interface",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  customer {\n    firstname\n    lastname\n    email\n    orders(\n      filter: {\n        number: {\n          match: \"000000005\"\n        }\n      }) {\n      items {\n        id\n        invoices {\n          id\n          items {\n            id\n            product_sku\n            product_name\n            quantity_invoiced\n            ... on BundleInvoiceItem {\n              bundle_options {\n                id\n                values {\n                  id\n                  product_name\n                  product_sku\n                  quantity\n                  price {\n                    value\n                    currency\n                  }\n                }\n              }\n            }\n            ... on DownloadableInvoiceItem {\n              id\n              downloadable_links {\n                uid\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Order Item Interface",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  customer {\n    firstname\n    lastname\n    email\n    orders(\n      filter: {\n        number: {\n          eq: \"000000005\"\n        }\n      }) {\n      items {\n        id\n        items {\n          id\n          product_name\n          product_sku\n          product_type\n          quantity_ordered\n          quantity_invoiced\n          quantity_shipped\n          quantity_refunded\n          ...on BundleOrderItem {\n            bundle_options {\n              id\n              label\n              values {\n                id\n                product_name\n                product_sku\n                quantity\n                price {\n                  value\n                  currency\n                }\n              }\n            }\n          }\n          ...on DownloadableOrderItem {\n            downloadable_links {\n              uid\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Shipment Item Interface",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  customer {\n    firstname\n    lastname\n    email\n    orders(\n      filter: {\n        number: {\n          match: \"000000005\"\n        }\n      }) {\n      items {\n        id\n        shipments {\n          id\n          items {\n            id\n            product_sku\n            product_name\n            ... on BundleShipmentItem {\n              bundle_options {\n                id\n                values {\n                  id\n                  product_name\n                  product_sku\n                  quantity\n                  price {\n                    value\n                    currency\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Company (B2B)",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Is Company Admin Email Available",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  isCompanyAdminEmailAvailable(email: \"roni_cost@example.com\"){\n    is_email_available\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Is Company Email Available",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  isCompanyEmailAvailable(email: \"roni_cost@example.com\"){\n    is_email_available\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Is Company Role Name Available",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  isCompanyRoleNameAvailable(name: \"Company Admin\") {\n    is_role_name_available\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Is Company User Email Available",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  isCompanyUserEmailAvailable(email: \"roni_cost@example.com\"){\n    is_email_available\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Company",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJraWQiOiIxIiwiYWxnIjoiSFMyNTYifQ.eyJ1aWQiOjIsInV0eXBpZCI6MywiaWF0IjoxNzA3OTI4NTcxLCJleHAiOjE3MDc5MzIxNzF9.8uIEG9pVj6Xv2SaP7w3P0tFh1KiRb7_sgCK4malXyX0",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  company{\n    company_admin {\n      firstname\n      lastname\n      email\n    }\n    email\n    id\n    legal_address {\n      street\n       city\n      region {\n        region_id\n        region_code\n      }\n      postcode\n      country_code\n      telephone\n    }\n    legal_name\n    name\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Create Company Role",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createCompanyRole(\n    input: {\n      name: \"Company Admin\"\n      permissions: [\n        \"Magento_Company::index\"\n        \"Magento_Company::view\"\n        \"Magento_Company::view_account\"\n        \"Magento_Company::edit_account\"\n        \"Magento_Company::view_address\"\n        \"Magento_Company::edit_address\"\n        \"Magento_Company::contacts\"\n        \"Magento_Company::payment_information\"\n        \"Magento_Company::shipping_information\"\n        \"Magento_Company::user_management\"\n        \"Magento_Company::roles_view\"\n        \"Magento_Company::roles_edit\"\n        \"Magento_Company::users_view\"\n        \"Magento_Company::users_edit\"\n        \"Magento_Company::credit\"\n        \"Magento_Company::credit_history\"\n      ]\n    }\n  ) {\n    role {\n      id\n      name\n      permissions {\n        id\n        text\n        sort_order\n        children {\n          id\n          text\n          sort_order\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Company User",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createCompanyUser(\n    input: {\n      email: \"john.doe@example.com\"\n      firstname: \"John\"\n      lastname: \"Doe\"\n      job_title: \"User\"\n      role_id: \"MQ==\"\n      status: ACTIVE\n      telephone: \"1234567890\"\n    }\n  ) {\n    user {\n      created_at\n      email\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Company",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createCompany(input: {\n    company_name: \"TestCo\"\n    company_email: \"tgarofalo@example.com\"\n    company_admin: {\n      email: \"tgarofalo@example.com\"\n      firstname: \"Taina\"\n      lastname:\"Garofalo\"\n    }\n    legal_name: \"TestCo Inc.\"\n    legal_address: {\n      street: [\n        \"100 Big Oak Tree Dr\"\n      ]\n      city: \"San Francisco\"\n      region: {\n        region_code: \"CA\"\n      }\n      postcode: \"99999\"\n      country_id: US\n      telephone: \"555 867-5309\"\n    }\n  }){\n    company {\n      id\n      name\n      company_admin {\n        email\n        firstname\n        lastname\n      }\n      legal_address {\n        street\n        city\n        region {\n          region_code\n          region_id\n        }\n        postcode\n        telephone\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Company Team",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createCompanyTeam(\n    input: {\n      name: \"Test Team\"\n    }\n  ) {\n    team {\n      id\n      name\n      description\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Company Role",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteCompanyRole(\n    id: \"Mg==\"\n  ) {\n    success\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Company User",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteCompanyUser(\n    id: \"Mg==\"\n  ) {\n    success\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Company",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateCompany(\n    input: {\n      legal_address: {\n        street: [\"265 Cambridge Ave\"]\n        city: \"Palo Alto\"\n        region: {\n          region_code:\"CA\"\n          region_id: 12\n        }\n        postcode: \"94306\"\n      }\n    }\n  ) {\n    company {\n      legal_address {\n        street\n        city\n        region {\n          region_code\n        }\n        postcode\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Company Team",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteCompanyTeam(\n    id: \"Mg==\"\n  ) {\n    success\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Company Role",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateCompanyRole(\n    input: {\n      id: \"Mg==\"\n      name: \"Company Admin (updated)\"\n    }\n  ) {\n    role {\n      id\n      name\n      permissions {\n        id\n        text\n        sort_order\n        children {\n          id\n          text\n          sort_order\n          children {\n            id\n            text\n            sort_order\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Company Structure",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateCompanyStructure(\n    input: {\n      tree_id: \"Mw==\"\n      parent_tree_id: \"MQ==\"\n    }\n  ) {\n    company {\n      structure(\n        rootId: \"MQ==\"\n      ) {\n        items {\n          id\n          parent_id\n          entity {\n            ... on CompanyTeam {\n              name\n              id\n              description\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Company Team",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateCompanyTeam(\n    input: {\n      name: \"My Test Team\"\n      description: \"My Test Team description\"\n      id: \"MQ==\"\n    }\n  ) {\n    team {\n      id\n      name\n      description\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Company User",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateCompanyUser(\n    input: {\n      id: \"Mg==\"\n      job_title: \"Company User\"\n    }\n  ) {\n    user {\n      email\n      firstname\n      lastname\n      job_title\n      telephone\n      status\n      role {\n        id\n        name\n        users_count\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"description": "# Company (B2B)\n\nThe  \nCompany component is the key entity within B2B on which all other  \nfeatures are in some way dependent. It allows joining multiple buyers  \nthat belong to the same company into a single company account."
		},
		{
			"name": "Attributes",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Attributes Form (Available in 2.4.7-beta only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  attributesForm(formCode: \"customer_register_address\") {\n    items {\n      label\n      entity_type\n      frontend_input\n      is_required\n    }\n    errors {\n      type\n      message\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attributes List (Available in 2.4.7-beta only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  attributesList(entityType: CUSTOMER) {\n    items {\n      code\n      label\n      # other attribute metadata\n    }\n    errors {\n      message\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Attributes Meta data (PWA Studio only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\nattributesMetadata(\n    entityType: PRODUCT\n  ) {\n    items {\n      attribute_labels {\n        label\n        store_code\n      }\n      code\n      data_type\n      sort_order\n      ui_input {\n          is_html_allowed\n          ui_input_type\n        __typename\n        ... on SelectableInputTypeInterface {\n          attribute_options {\n            is_default\n            label\n            uid\n          }\n        }\n      }\n      uid\n      __typename\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Custom Attribute Metadata V2 (Available in 2.4.7-beta only)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n    customAttributeMetadataV2(attributes: [{attribute_code: \"firstname\", entity_type: \"customer\"}]) {\n        items {\n            code\n            label\n            entity_type\n            frontend_input\n            is_required\n            default_value\n            is_unique\n            options {\n                label\n                value\n            }\n        }\n        errors {\n            type\n            message\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Gift Registry (Adobe Commerce only)",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Gift Registry",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  giftRegistry(giftRegistryUid: \"W9YcRai9JmzGglqP3p0USodTTM3BmjjY\"){\n    uid\n    type {\n      uid\n      label\n    }\n    event_name\n    owner_name\n    status\n    privacy_settings\n    registrants {\n     uid\n      firstname\n      lastname\n    }\n    shipping_address {\n      street\n      city\n      region {\n        region\n      }\n      postcode\n      country_code\n    }\n    dynamic_attributes {\n      code\n      group\n      label\n      value\n    }\n    event_name\n    items {\n      uid\n      quantity\n      quantity_fulfilled\n      product {\n        uid\n        name\n        sku\n      }\n    }\n    message\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gift Registry Email Search",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  giftRegistryEmailSearch(email: \"staceyg@example.com\"){\n    event_date\n    event_title\n    gift_registry_uid\n    name\n    type\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gift Registry Id Search",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  giftRegistryIdSearch(giftRegistryUid: \"W9YcRai9JmzGglqP3p0USodTTM3BmjjY\"){\n    event_date\n    event_title\n    gift_registry_uid\n    name\n    type\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gift Registry Types",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  giftRegistryTypes{\n    label\n    uid\n    dynamic_attributes_metadata {\n      label\n      input_type\n      is_required\n      code\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Gift Registry Type Search",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  giftRegistryTypeSearch(firstName: \"Stacey\", lastName: \"Gaines\"){\n    event_date\n    event_title\n    gift_registry_uid\n    name\n    type\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Add Gift Registry Registrants",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addGiftRegistryRegistrants (\n    giftRegistryUid: \"W9YcRai9JmzGglqP3p0USodTTM3BmjjY\",\n    registrants: {\n        firstname: \"Monica\"\n        lastname: \"Resendez\"\n        email: \"monica@example.com\"\n    }\n  ){\n    gift_registry {\n      uid\n      event_name\n      registrants {\n        uid\n        firstname\n        lastname\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Gift Registry",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createGiftRegistry(\n    giftRegistry: {\n      gift_registry_type_uid: \"Mw==\"\n      event_name: \"Bill and Julie's wedding\"\n      message: \"Help us celebrate Bill and Julie's wedding, which will be held on May 1, 2021\"\n      privacy_settings: PRIVATE\n      status: ACTIVE\n      shipping_address: {\n        address_id: 1\n      }\n      registrants: [\n        {\n          firstname: \"Julie\"\n          lastname: \"Rao\"\n          email: \"julierao@example.com\"\n          dynamic_attributes: [{\n            code: \"role\"\n            value: \"Bride\" }]\n        }\n        {\n          firstname: \"Bill\"\n          lastname: \"Preston\"\n          email: \"bpreston@example.com\"\n          dynamic_attributes: [{\n            code: \"role\"\n            value: \"Groom\" }]\n        }\n      ]\n      dynamic_attributes: [\n        {\n          code: \"number_of_guests\"\n          value: \"101\"\n        }\n        {\n          code: \"event_date\"\n          value: \"2021-05-01\"\n        }\n        {\n          code: \"event_country\"\n          value: \"US\"\n        }\n        {\n          code: \"event_location\"\n          value: \"Ann Arbor, MI\"\n        }\n      ]\n    }\n  ) {\n    gift_registry {\n      uid\n      event_name\n      message\n      owner_name\n      privacy_settings\n      status\n      registrants {\n        uid\n        firstname\n        lastname\n        email\n        dynamic_attributes {\n          code\n          label\n          value\n        }\n      }\n      type {\n        uid\n        label\n      }\n      items {\n        uid\n        product {\n          uid\n          sku\n          name\n        }\n        quantity\n        quantity_fulfilled\n      }\n      shipping_address {\n        firstname\n        lastname\n        street\n        region {\n          region\n        }\n        postcode\n        country_code\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move Cart Items To Gift Registry",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  moveCartItemsToGiftRegistry (\n      cartUid:\"8k0Q4MpH2IGahWrTRtqM61YV2MtLPApz\",\n      giftRegistryUid:\"Owu5mdQ3uyfOAWzj8lFlHZW4uCDaMWC6\"\n  ) {\n  gift_registry {\n      uid\n      created_at\n      owner_name\n      status\n      type {\n        label\n      }\n      message\n      items {\n        product {\n          sku\n          name\n        }\n      }\n    }\n    status\n    user_errors {\n      code\n      message\n      product_uid\n      gift_registry_uid\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Gift Registry",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  removeGiftRegistry(giftRegistryUid: \"lobehNsInxfDeTt290DO5vH6DVltN74S\"){\n    success\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Gift Registry Items",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  removeGiftRegistryItems(\n    giftRegistryUid: \"iSJHFdAtF8YBM5ALgNyNIgQmnbOW9t69\",\n    itemsUid: [\"MTM=\"]\n  ){\n    gift_registry {\n      uid\n      event_name\n      items {\n        uid\n        product {\n          sku\n        }\n        quantity\n        quantity_fulfilled\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Gift Registry Registrants",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  removeGiftRegistryRegistrants(\n      giftRegistryUid: \"W9YcRai9JmzGglqP3p0USodTTM3BmjjY\",\n      registrantsUid: \"OA==\"\n    ){\n    gift_registry {\n      uid\n      registrants {\n        uid\n        firstname\n        lastname\n        email\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Share Gift Registry",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  shareGiftRegistry(\n    giftRegistryUid: \"W9YcRai9JmzGglqP3p0USodTTM3BmjjY\",\n    sender: {\n      name: \"Roni Costello\"\n      message: \"Help us celebrate Theo's 45th Birthday\"\n    }\n    invitees: [\n      {\n        name: \"Brenda Vazquez\"\n        email: \"brenda@example.com\"\n      }\n      {\n        name: \"Alex Brunner\"\n        email: \"alex1@example.com\"\n      }\n    ]){\n    is_shared\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Gift Registry",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  updateGiftRegistry(\n    giftRegistryUid: \"D0R6d2B7aZWOQuuWftHZ0iwuexQPgaei\",\n    giftRegistry: {\n      privacy_settings: PUBLIC\n      message: \"Help us celebrate Bill and Julie's wedding, which will be held on May 8, 2021\"\n      dynamic_attributes: {\n        code: \"event_date\"\n        value: \"2021-05-08\"\n      }\n    })\n  {\n    gift_registry {\n      uid\n      event_name\n      message\n      status\n      privacy_settings\n      dynamic_attributes {\n        code\n        label\n        value\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Gift Registry Items",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  updateGiftRegistryItems(giftRegistryUid: \"iSJHFdAtF8YBM5ALgNyNIgQmnbOW9t69\",\n    items: [{\n      gift_registry_item_uid: \"OQ==\"\n      quantity: 3\n      note:  \"This is the number one thing on our list.\"}\n    ]){\n    gift_registry {\n      uid\n      event_name\n      items {\n        uid\n        product {\n          sku\n        }\n        quantity\n        quantity_fulfilled\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Gift Registry Registrants",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  updateGiftRegistryRegistrants(\n      giftRegistryUid: \"W9YcRai9JmzGglqP3p0USodTTM3BmjjY\",\n      registrants: {\n          giftRegistryRegistrantUid: \"OA==\"\n          email: \"new-email@example.com\"\n        }\n    )\n    {\n    gift_registry {\n      uid\n      registrants {\n        uid\n        firstname\n        lastname\n        email\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Requisition lists (B2B)",
			"item": [
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Add Products To Requisition List",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addProductsToRequisitionList(\n      requisitionListUid: \"Mg==\"\n      requisitionListItems: [\n        {\n            sku: \"MS10\"\n            quantity: 1\n            selected_options: [\"Y29uZmlndXJhYmxlLzkzLzUw\",\"Y29uZmlndXJhYmxlLzE2MC8xNjg\"]\n        }\n      ]\n    ) {\n    requisition_list {\n      uid\n      items {\n        items {\n          ... on RequisitionListItemInterface {\n            uid\n            product {\n              uid\n              sku\n              name\n            }\n            quantity\n          }\n        }\n      }\n      items_count\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Requisition List Items To Cart",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addRequisitionListItemsToCart (\n    requisitionListUid: \"Mg==\"\n    requisitionListItemUids:\n    [\"Mw==\", \"Ng==\", \"Nw==\"]\n  )\n  {\n    status\n    cart {\n      items {\n        uid\n        product {\n          uid\n          sku\n          name\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Clear Customer Cart",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  clearCustomerCart(\n      cartUid: \"8k0Q4MpH2IGahWrTRtqM61YV2MtLPApz\"\n    ) {\n        status\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Copy Items Between Requisition Lists",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  copyItemsBetweenRequisitionLists(\n      sourceRequisitionListUid: \"Mg==\",\n      destinationRequisitionListUid: \"Mw==\",\n      requisitionListItem: {\n        requisitionListItemUids: [\n          \"Nw==\"\n        ]\n      }\n    ) {\n    requisition_list {\n      uid\n      name\n      items_count\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Requisition List",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createRequisitionList(input:{\n    name: \"Frequently Ordered Products\"\n    description: \"Frequently ordered products list\"\n  }\n  ) {\n    requisition_list {\n      uid\n      name\n      description\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete RequisitionList",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteRequisitionList(\n    requisitionListUid: \"Mw==\"\n  ) {\n    status\n    requisition_lists {\n      total_count\n      items {\n        uid\n        name\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Requisition List Items",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteRequisitionListItems(\n    requisitionListUid: \"Mg==\",\n    requisitionListItemUids: [\"NA==\",\"NQ==\"]\n  ) {\n    requisition_list {\n      uid\n      items_count\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Move Items Between Requisition Lists",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  moveItemsBetweenRequisitionLists(\n      sourceRequisitionListUid: \"Mg==\"\n      destinationRequisitionListUid: \"Mw==\"\n      requisitionListItem: {\n        requisitionListItemUids:\n          [\"MTI=\"]\n        }\n        ) {\n      source_requisition_list {\n        uid\n        name\n        items_count\n      }\n      destination_requisition_list {\n        uid\n        name\n        items_count\n      }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Requisition List",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateRequisitionList(input:{\n    name: \"Frequently Ordered Essential Products\"\n    description: \"Frequently ordered essential products list\"\n  }\n    requisitionListUid: \"Mw==\"\n  ) {\n    requisition_list {\n      uid\n      name\n      description\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Requisition List Items",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateRequisitionListItems(\n    requisitionListUid: \"Mg==\",\n    requisitionListItems: [\n      {\n          item_id: \"Mw==\"\n          quantity: 2\n      }\n    ]\n    ){\n    requisition_list {\n      uid\n      name\n      items_count\n      items {\n        items {\n          uid\n          quantity\n          product {\n            uid\n            name\n            sku\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Interface",
					"item": [
						{
							"name": "RequisitionListItemInterface attributes and implementations",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addProductsToRequisitionList(\n      requisitionListUid: \"Mg==\"\n      requisitionListItems: [\n        {\n            sku: \"MS10\"\n            quantity: 1\n            selected_options: [\"Y29uZmlndXJhYmxlLzkzLzUw\",\"Y29uZmlndXJhYmxlLzE2MC8xNjg\"]\n        }\n      ]\n    ) {\n    requisition_list {\n      uid\n      items {\n        items {\n          ... on RequisitionListItemInterface {\n            uid\n            product {\n              uid\n              sku\n              name\n            }\n            quantity\n          }\n        }\n      }\n      items_count\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Catalog Service(Adobe Commerce only)",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Categories Query",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Magento-Customer-Group",
										"value": "",
										"description": "This value is available in the customer_group_data_exporter database table.",
										"type": "text"
									},
									{
										"key": "Magento-Environment-Id",
										"value": "",
										"description": "This value is displayed at System > Commerce Services Connector > SaaS Identifier > Data Space ID or can be obtained by running the bin/magento config:show services_connector/services_id/environment_id command.",
										"type": "text"
									},
									{
										"key": "Magento-Store-Code",
										"value": "",
										"description": "The code assigned to the store associated with the active store view. For example, main_website_store.",
										"type": "text"
									},
									{
										"key": "Magento-Store-View-Code",
										"value": "",
										"description": "The code assigned to the active store view. For example, default.",
										"type": "text"
									},
									{
										"key": "Magento-Website-Code",
										"value": "",
										"description": "The code assigned to the website associated with the active store view. For example, base.",
										"type": "text"
									},
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "A unique key that is generated during the onboarding process.",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n    categories(ids: [\"11\"], roles: [\"show_in_menu\", \"active\"], subtree: {\n    \"depth\": 3,\n    \"startLevel\": 1\n}) {\n    name\n    id\n    level\n    roles\n    path\n    urlPath\n    urlKey\n    parentId\n    children\n    }\n\n}",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Products",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Magento-Customer-Group",
										"value": "",
										"description": "This value is available in the customer_group_data_exporter database table.",
										"type": "text"
									},
									{
										"key": "Magento-Environment-Id",
										"value": "",
										"description": "This value is displayed at System > Commerce Services Connector > SaaS Identifier > Data Space ID or can be obtained by running the bin/magento config:show services_connector/services_id/environment_id command.",
										"type": "text"
									},
									{
										"key": "Magento-Store-Code",
										"value": "",
										"description": "The code assigned to the store associated with the active store view. For example, main_website_store.",
										"type": "text"
									},
									{
										"key": "Magento-Store-View-Code",
										"value": "",
										"description": "The code assigned to the active store view. For example, default.",
										"type": "text"
									},
									{
										"key": "Magento-Website-Code",
										"value": "",
										"description": "The code assigned to the website associated with the active store view. For example, base.",
										"type": "text"
									},
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "A unique key that is generated during the onboarding process.",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n\n    products(skus: [\"24-UG07\"]) {\n        __typename\n        id\n        sku\n        name\n        description\n        shortDescription\n        addToCartAllowed\n        url\n        images(roles: []) {\n            url\n            label\n            roles\n        }\n        attributes(roles: []) {\n            name\n            label\n            value\n            roles\n        }\n        ... on SimpleProductView {\n            price {\n                final {\n                    amount {\n                        value\n                        currency\n                    }\n                }\n                regular {\n                    amount {\n                        value\n                        currency\n                    }\n                }\n                roles\n            }\n        }\n        links {\n            product {\n                sku\n\n            }\n            linkTypes\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Search",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Magento-Customer-Group",
										"value": "",
										"description": "This value is available in the customer_group_data_exporter database table.",
										"type": "text"
									},
									{
										"key": "Magento-Environment-Id",
										"value": "",
										"description": "This value is displayed at System > Commerce Services Connector > SaaS Identifier > Data Space ID or can be obtained by running the bin/magento config:show services_connector/services_id/environment_id command.",
										"type": "text"
									},
									{
										"key": "Magento-Store-Code",
										"value": "",
										"description": "The code assigned to the store associated with the active store view. For example, main_website_store.",
										"type": "text"
									},
									{
										"key": "Magento-Store-View-Code",
										"value": "",
										"description": "The code assigned to the active store view. For example, default.",
										"type": "text"
									},
									{
										"key": "Magento-Website-Code",
										"value": "",
										"description": "The code assigned to the website associated with the active store view. For example, base.",
										"type": "text"
									},
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "A unique key that is generated during the onboarding process.",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  productSearch(\n    phrase: \"bag\"\n    sort: [\n      {\n        attribute: \"price\"\n        direction: DESC }]\n    page_size: 9\n  ) {\n    page_info {\n      current_page\n      page_size\n      total_pages\n    }\n    items {\n      productView {\n        name\n        sku\n        ... on SimpleProductView {\n          price {\n            final {\n              amount {\n                value\n                currency\n              }\n            }\n            regular {\n              amount {\n                value\n                currency\n              }\n            }\n          }\n        }\n        ... on ComplexProductView {\n          options {\n            id\n            title\n            required\n            values {\n              id\n              title\n            }\n          }\n          priceRange {\n            maximum {\n              final {\n                amount {\n                  value\n                  currency\n                }\n              }\n              regular {\n                amount {\n                  value\n                  currency\n                }\n              }\n            }\n            minimum {\n              final {\n                amount {\n                  value\n                  currency\n                }\n              }\n              regular {\n                amount {\n                  value\n                  currency\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refine Product",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Magento-Customer-Group",
										"value": "",
										"description": "This value is available in the customer_group_data_exporter database table.",
										"type": "text"
									},
									{
										"key": "Magento-Environment-Id",
										"value": "",
										"description": "This value is displayed at System > Commerce Services Connector > SaaS Identifier > Data Space ID or can be obtained by running the bin/magento config:show services_connector/services_id/environment_id command.",
										"type": "text"
									},
									{
										"key": "Magento-Store-Code",
										"value": "",
										"description": "The code assigned to the store associated with the active store view. For example, main_website_store.",
										"type": "text"
									},
									{
										"key": "Magento-Store-View-Code",
										"value": "",
										"description": "The code assigned to the active store view. For example, default.",
										"type": "text"
									},
									{
										"key": "Magento-Website-Code",
										"value": "",
										"description": "The code assigned to the website associated with the active store view. For example, base.",
										"type": "text"
									},
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "A unique key that is generated during the onboarding process.",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n    refineProduct(optionIds: [\"Y29uZmlndXJhYmxlLzE4Ni8xNzc=\"], sku: \"MH12\") {\n        __typename\n        id\n        sku\n        name\n        url\n        ... on SimpleProductView {\n            price {\n                final {\n                    amount {\n                        value\n                    }\n                }\n                regular {\n                    amount {\n                        value\n                    }\n                }\n            }\n        }\n        ... on ComplexProductView {\n            options {\n                id\n                title\n                required\n                values {\n                    id\n                    title\n\n                }\n            }\n            priceRange {\n                maximum {\n                    final {\n                        amount {\n                            value\n                        }\n                    }\n                    regular {\n                        amount {\n                            value\n                        }\n                    }\n                }\n                minimum {\n                    final {\n                        amount {\n                            value\n                        }\n                    }\n                    regular {\n                        amount {\n                            value\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Purchase Order B2B",
			"item": [
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Add Purchase Order Comment",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addPurchaseOrderComment(\n      input: {\n        purchase_order_uid: \"MQ==\",\n        comment: \"Looks good to me\"\n      },\n    ) {\n    comment {\n        uid\n        author {\n            firstname\n            lastname\n            email\n        }\n        text\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Purchase Order Items To Cart",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  addPurchaseOrderItemsToCart(\n    input: {\n      purchase_order_uid: \"MQ==\",\n      cart_id: \"hJUrIcPm77uCyYkSTBRGyjSvS40mw1Qd\",\n      replace_existing_cart_items: false\n    }\n  ) {\n    cart {\n      id\n      items {\n        product {\n          sku\n        }\n      }\n    }\n    user_errors {\n      message\n      code\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Approve Purchase Orders",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  approvePurchaseOrders(\n    input: {\n      purchase_order_uids: [\"Ng==\"]\n    }\n  ) {\n    purchase_orders {\n      number\n    }\n    errors {\n      message\n      type\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "CancelPurchaseOrders",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  cancelPurchaseOrders(\n    input: {\n        purchase_order_uids: [\"NQ==\"]\n    }\n  ) {\n    purchase_orders {\n        number\n        status\n    }\n    errors {\n        message\n        type\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Place Order For Purchase Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  placeOrderForPurchaseOrder(\n    input: {\n        purchase_order_uid: \"MQ==\"\n    }\n  ) {\n   order {\n    number\n   }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Place Purchase Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  placePurchaseOrder(\n    input: {\n        cart_id: \"hJUrIcPm77uCyYkSTBRGyjSvS40mw1Qd\"\n    }\n  ) {\n    purchase_order {\n        number\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Reject Purchase Orders",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  rejectPurchaseOrders(\n    input: {\n      purchase_order_uids: [\"MTA=\"]\n    }\n  ) {\n    purchase_orders {\n      number\n      uid\n      status\n    }\n    errors {\n      message\n      type\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Purchase order approval rules (B2B)",
			"item": [
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Create Purchase Order Approval Rule",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  createPurchaseOrderApprovalRule(\n    input: {\n        name: \"Rule name\",\n        description: \"Rule description\",\n        applies_to: [],\n        status: ENABLED,\n        condition: {\n            attribute: GRAND_TOTAL,\n            operator: MORE_THAN,\n            amount: {\n                value: 100.00,\n                currency: EUR\n            }\n        },\n        approvers: [\"MQ==\"]\n    }\n  ) {\n    name\n    uid\n    applies_to_roles\n    condition\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Purchase Order Approval Rule",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updatePurchaseOrderApprovalRule(\n    input: {\n        uid: \"Mg==\",\n        name: \"Rule name updated\",\n        description: \"Rule description\",\n        applies_to: [],\n        status: ENABLED,\n        condition: {\n            attribute: GRAND_TOTAL,\n            operator: MORE_THAN,\n            amount: {\n                value: 100.00,\n                currency: EUR\n            }\n        }\n    }\n  ) {\n    uid\n    name\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Purchase Order Approval Rule",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deletePurchaseOrderApprovalRule(\n    input: {\n        approval_rule_uids: [\"Mg==\"]\n    }\n  ) {\n    errors {\n        message\n        type\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Validate Purchase Orders",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  validatePurchaseOrders(\n    input: {\n        purchase_order_uids: [\"Nw==\", \"OA==\"]\n    }\n  ) {\n    purchase_orders {\n        number\n        status\n    }\n    errors {\n        message\n        type\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Interface",
					"item": [
						{
							"name": "Purchase Order Approval Rule Condition Interface",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "{\n    customer {\n        purchase_order_approval_rule(\n            uid: \"Mg==\"\n        ) {\n            condition {\n              attribute\n              operator\n              ... on PurchaseOrderApprovalRuleConditionAmount {\n                amount {\n                  value\n                  currency\n                }\n              }\n              ... on PurchaseOrderApprovalRuleConditionQuantity {\n                quantity\n              }\n            }\n        }\n    }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Negotiable quote (B2B)",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Negotiable Quote",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  negotiableQuote(uid: \"kw6mLEvl6vjjPNsjtJqwpamv5o0iT1bc\"){\n    uid\n    status\n    total_quantity\n    email\n    items {\n      product {\n        name\n        sku\n        uid\n        price_range {\n          maximum_price {\n            regular_price {\n              value\n            }\n          }\n        }\n      }\n      quantity\n    }\n    comments {\n      uid\n      created_at\n      author {\n        firstname\n        lastname\n      }\n      text\n    }\n    history {\n      uid\n      created_at\n      author {\n        firstname\n        lastname\n      }\n      change_type\n      changes {\n        comment_added {\n          comment\n        }\n        statuses {\n          changes {\n            new_status\n            old_status\n          }\n        }\n        expiration {\n          new_expiration\n          old_expiration\n          }\n        }\n        total {\n          new_price {\n            value\n          }\n          old_price {\n            value\n          }\n        }\n      }\n    }\n    uid\n    updated_at\n  }\n\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Negotiable Quotes",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query {\n  negotiableQuotes(filter: { name:\n    { match: \"request\" }\n    })\n    {\n    items {\n      uid\n      name\n      created_at\n      status\n    }\n    total_count\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Mutations",
					"item": [
						{
							"name": "Close Negotiable Quotes",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  closeNegotiableQuotes(\n    input: {\n      quote_uids: [\"xyz\"]\n    }\n  ) {\n    result_status,\n    operation_results {\n      ...on NegotiableQuoteUidOperationSuccess{\n        __typename\n        quote_uid\n      }\n      ...on CloseNegotiableQuoteOperationFailure{\n        __typename\n        quote_uid\n        errors {\n          __typename\n          ...on ErrorInterface{\n            message\n          }\n          ...on NoSuchEntityUidError{\n            uid\n          }\n          ...on NegotiableQuoteInvalidStateError {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Negotiable Quotes",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  deleteNegotiableQuotes(\n    input: {\n      quote_uids: [\"R1chDMgmh6PXGz2AjXMTBaiE68wTydRH\"]\n    }\n  ) {\n    result_status,\n    operation_results {\n      ...on NegotiableQuoteUidOperationSuccess{\n        __typename\n        quote_uid\n      }\n      ...on DeleteNegotiableQuoteOperationFailure{\n        __typename\n        quote_uid\n        errors {\n          __typename\n          ...on ErrorInterface{\n            message\n          }\n          ...on NoSuchEntityUidError{\n            uid\n            message\n          }\n          ...on NegotiableQuoteInvalidStateError {\n            message\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Place Negotiable Quote Order",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  placeNegotiableQuoteOrder(\n    input: {\n      quote_uid: \"xCA4wSZEHsb5QbFiKfoq5k1Dk8vIPBgb\"\n    }\n  ) {\n    order {\n      order_number\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Negotiable Quote Items",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  removeNegotiableQuoteItems(\n    input: {\n      quote_uid: \"xCA4wSZEHsb5QbFiKfoq5k1Dk8vIPBgb\"\n      quote_item_uids: [\"MTc=\"]\n    }\n  ) {\n    quote {\n      uid\n      name\n      updated_at\n      items {\n        uid\n        product {\n          uid\n          sku\n          name\n        }\n        quantity\n        prices {\n          price {\n            value\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Request Negotiable Quote",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  requestNegotiableQuote (\n    input: {\n      cart_id: \"kw6mLEvl6vjjPNsjtJqwpamv5o0iT1bc\"\n      quote_name: \"Discount request\"\n      comment: {\n        comment: \"Requesting a 10% discount for being a repeat customer.\"}\n    }\n  ){\n    quote {\n      uid\n      created_at\n      status\n      buyer {\n        firstname\n        lastname\n      }\n      comments {\n        uid\n        created_at\n        author {\n          firstname\n          lastname\n        }\n        creator_type\n        text\n      }\n      items {\n        product {\n          uid\n          sku\n          name\n          price_range {\n            maximum_price {\n              regular_price {\n                value\n              }\n            }\n          }\n        }\n        quantity\n      }\n      prices {\n        subtotal_excluding_tax {\n          value\n        }\n        subtotal_including_tax {\n          value\n        }\n        subtotal_with_discount_excluding_tax {\n          value\n        }\n        grand_total {\n          value\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Send Negotiable Quote For Review",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation{\n  sendNegotiableQuoteForReview(input: {\n    quote_uid: \"xCA4wSZEHsb5QbFiKfoq5k1Dk8vIPBgb\"\n    comment: { comment: \"Thanks!\"}\n  }){\n    quote {\n      uid\n      buyer {\n        firstname\n        lastname\n      }\n      name\n      updated_at\n      status\n      comments {\n        uid\n        created_at\n        creator_type\n        author {\n          firstname\n          lastname\n        }\n        text\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Negotiable Quote Billing Address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  setNegotiableQuoteBillingAddress(input: {\n    quote_uid: \"prFSdZyHOpMXeiJ32XlBzd8e1Mte9loS\",\n    billing_address: {\n      address: {\n        company: \"TestCo\"\n        firstname: \"Taina\"\n        lastname: \"Garofalo\"\n        street: \"100 Big Oak Tree Dr\"\n        city: \"San Francisco\"\n        postcode: \"9999\"\n        region: \"CA\"\n        region_id: 12\n        country_code: \"US\"\n        telephone: \"555 999-9999\"\n      }\n    }\n  }) {\n    quote {\n      billing_address {\n        company\n        firstname\n        lastname\n        street\n        city\n        region {\n          label\n          code\n        }\n        country {\n          label\n          code\n        }\n      }\n    }\n  }\n}\n\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Negotiable Quote Payment Method",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  setNegotiableQuotePaymentMethod(\n    input: {\n      quote_uid: \"xCA4wSZEHsb5QbFiKfoq5k1Dk8vIPBgb\"\n      payment_method: { code: \"checkmo\" }\n    }\n  ) {\n    quote {\n      uid\n      name\n      status\n      available_payment_methods {\n        code\n        title\n      }\n      selected_payment_method {\n        code\n        title\n        purchase_order_number\n      }\n      items {\n        product {\n          sku\n          name\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Negotiable Quote Shipping Address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  setNegotiableQuoteShippingAddress(input: {\n    quote_uid: \"prFSdZyHOpMXeiJ32XlBzd8e1Mte9loS\"\n    shipping_addresses: {\n      customer_address_uid: \"MQ==\"\n    }\n  }) {\n    quote {\n      shipping_addresses {\n        company\n        firstname\n        lastname\n        street\n        city\n        region {\n          label\n          code\n        }\n        country {\n          label\n          code\n        }\n      }\n    }\n  }\n}\n\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Set Negotiable Quote Shipping Methods",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token\n",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "\nmutation {\n  setNegotiableQuoteShippingMethods(\n    input: {\n      quote_uid: \"z13H2xRCqEiyVoPJmSmekvhOo4GdsVSp\",\n      shipping_methods: [\n        {\n          carrier_code: \"tablerate\"\n          method_code: \"bestway\"\n        }\n      ]\n    }\n  ) {\n    quote {\n      uid\n      shipping_addresses {\n        selected_shipping_method {\n          carrier_code\n          carrier_title\n          method_code\n          method_title\n          amount {\n            value\n            currency\n          }\n        }\n      }\n    }\n  }\n}\n\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Negotiable Quote Quantities",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "This mutation requires a valid customer authentication token.Get token by this GraphQL Customer > Generate customer token\nValue = Bearer Token\n",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "mutation {\n  updateNegotiableQuoteQuantities(\n    input: {\n      quote_uid: \"xCA4wSZEHsb5QbFiKfoq5k1Dk8vIPBgb\"\n      items: [\n        { quote_item_uid: \"MTU=\", quantity: 7 }\n        { quote_item_uid: \"MTY=\", quantity: 8 }\n      ]\n    }\n  ) {\n    quote {\n      uid\n      name\n      updated_at\n      items {\n        uid\n        product {\n          uid\n          sku\n          name\n        }\n        quantity\n        prices {\n          price {\n            value\n          }\n        }\n      }\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Product Recommendations (Adobe Commerce Only)",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Recommendations",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Magento-Customer-Group",
										"value": "",
										"description": "This value is available in the customer_group_data_exporter database table.",
										"type": "text"
									},
									{
										"key": "Magento-Environment-Id",
										"value": "",
										"description": "This value is displayed at System > Commerce Services Connector > SaaS Identifier > Data Space ID or can be obtained by running the bin/magento config:show services_connector/services_id/environment_id command.",
										"type": "text"
									},
									{
										"key": "Magento-Store-Code",
										"value": "",
										"description": "The code assigned to the store associated with the active store view. For example, main_website_store.",
										"type": "text"
									},
									{
										"key": "Magento-Store-View-Code",
										"value": "",
										"description": "The code assigned to the active store view. For example, default.",
										"type": "text"
									},
									{
										"key": "Magento-Website-Code",
										"value": "",
										"description": "The code assigned to the website associated with the active store view. For example, base.",
										"type": "text"
									},
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "A unique key that is generated during the onboarding process.",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\nrecommendations(currentSku: \"MP01\", pageType: Product) {\n    totalResults\n    results {\n        unitId\n        unitName\n        totalProducts\n        pageType\n        typeId\n        storefrontLabel\n        displayOrder\n        productsView {\n            sku\n            rank\n            score\n            queryType\n            categories\n            visibility\n        }\n    }\n}\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Live Search(Adobe Commerce Only)",
			"item": [
				{
					"name": "Queries",
					"item": [
						{
							"name": "Attribute Metadata",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Magento-Environment-Id",
										"value": "",
										"description": "This value is displayed at Stores > Configuration > Services > Magento Services > SaaS Environment or can be obtained by running the bin/magento config:show services_connector/services_id/environment_id command.",
										"type": "text"
									},
									{
										"key": "Magento-Store-Code",
										"value": "",
										"description": "The code assigned to the store associated with the active store view. For example, main_website_store.\n",
										"type": "text"
									},
									{
										"key": "Magento-Store-View-Code",
										"value": "",
										"description": "The code assigned to the active store view. For example, default.",
										"type": "text"
									},
									{
										"key": "Magento-Website-Code",
										"value": "",
										"description": "The code assigned to the website associated with the active store view. For example, base.",
										"type": "text"
									},
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "This value must be set to search_gql.",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  attributeMetadata{\n    sortable {\n      attribute\n      label\n      numeric\n    }\n    filterableInSearch  {\n      attribute\n      label\n      numeric\n    }\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						},
						{
							"name": "Product Search",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Magento-Environment-Id",
										"value": "",
										"description": "This value is displayed at Stores > Configuration > Services > Magento Services > SaaS Environment or can be obtained by running the bin/magento config:show services_connector/services_id/environment_id command.",
										"type": "text"
									},
									{
										"key": "Magento-Store-Code",
										"value": "",
										"description": "The code assigned to the store associated with the active store view. For example, main_website_store.",
										"type": "text"
									},
									{
										"key": "Magento-Store-View-Code",
										"value": "",
										"description": "The code assigned to the active store view. For example, default.",
										"type": "text"
									},
									{
										"key": "Magento-Website-Code",
										"value": "",
										"description": "The code assigned to the website associated with the active store view. For example, base.",
										"type": "text"
									},
									{
										"key": "X-Api-Key",
										"value": "",
										"description": "This value must be set to search_gql.",
										"type": "text"
									}
								],
								"body": {
									"mode": "graphql",
									"graphql": {
										"query": "query{\n  productSearch(\n    phrase: \"\"\n    sort: [\n      { attribute: \"price\", direction: DESC }\n      { attribute: \"name\", direction: DESC }\n    ]\n    filter: [\n      { attribute: \"categoryPath\", in: [\"women/bottoms-women\"] }\n    ]\n    page_size: 9\n  ) {\n    total_count\n    page_info {\n      current_page\n      page_size\n      total_pages\n    }\n    facets {\n      attribute\n      title\n      type\n      buckets {\n        title\n        __typename\n        ... on RangeBucket {\n          title\n          to\n          from\n          count\n        }\n        ... on ScalarBucket {\n          title\n          id\n          count\n        }\n        ... on StatsBucket {\n          title\n          min\n          max\n        }\n      }\n    }\n    items {\n      product {\n        name\n        sku\n      }\n    }\n    suggestions\n  }\n}\n",
										"variables": ""
									}
								},
								"url": {
									"raw": "{{base_url}}/graphql",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"graphql"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "",
			"type": "default"
		}
	]
}